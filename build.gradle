import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson
import groovy.json.JsonSlurper
import java.io.File

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE")
        classpath "com.bmuschko:gradle-docker-plugin:3.0.5"
        classpath "org.hidetake:gradle-ssh-plugin:2.8.0"
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'org.hidetake.ssh'
apply plugin: "jp.classmethod.aws.s3"

ext.systemProperties= System.properties

aws {
	profileName = "default"
	region = "us-east-1"
}


jar {
    baseName = 'helloworld-docker'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}



import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

docker {
    registryCredentials {
        url = 'https://index.docker.io/v1'
        username = 'msambaraju'
        password = 'whatsup1'
        email = 'msambaraju@gmail.com'
    }
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('./docker/Dockerfile')
}

task buildImage(type: DockerBuildImage) {
    //dependsOn createDockerfile
    dockerFile = new File('./docker/Dockerfile')
    inputDir = dockerFile.parentFile
    tag = "msorg/"+ jar.baseName
    
    doFirst {
         copy {
	     from jar
	     into './docker/'
	   }
  	}
}

task pushImage(type: DockerPushImage) {
     imageName = "msorg/"+ jar.baseName
}

task pullImage(type: DockerPullImage) {
    url = 'tcp://54.210.169.16:2375/'
    repository = "msorg/"+ jar.baseName
}

def sshHost = '54.210.169.16'


remotes {
  jenkins {
    host = sshHost
    user = 'ec2-user'
    password = 'ec2-user'
    identity = file('/Users/malliksambaraju/AWS/MallikEC2Key.pem')
  }
}

def stackName = 'TestStack'

task createAWSStack(type:Exec) {
 workingDir './template/'
  //on linux
  commandLine './cloudformation.sh', stackName
  standardOutput = new ByteArrayOutputStream()
	doLast {
		ext.loginCommand = standardOutput.toString()
		println loginCommand

	}
}

/*import jp.classmethod.aws.gradle.cloudformation.AmazonCloudFormationWaitStackStatusTask
import jp.classmethod.aws.gradle.cloudformation.AmazonCloudFormationPluginExtension

task checkAWSStackStatus(type: AmazonCloudFormationWaitStackStatusTask) {
   stackName = "mydockstack"
} */


